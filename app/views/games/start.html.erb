<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <link rel="stylesheet" href="https://unpkg.com/tailwindcss@2.2.19/dist/tailwind.min.css"/>
  <meta name="csrf-token" content="<%= form_authenticity_token %>">
  <style>
    .card {
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.1);
      transition: transform 0.6s;
      transform-style: preserve-3d;
      position: relative;
    }
    .card:hover {
      box-shadow: 0 10px 15px rgba(0, 0, 0, 0.15), 0 20px 30px rgba(0, 0, 0, 0.15);
    }
    .card.flipped {
      transform: rotateY(180deg);
    }
    .card .front, .card .back {
      position: absolute;
      width: 100%;
      height: 100%;
      backface-visibility: hidden;
    }
    .card .back {
      transform: rotateY(180deg);
    }
</style>
</head>
<body class="font-sans antialiased text-gray-900 leading-normal tracking-wider bg-cover" style="background-image:url('<%= asset_path('back_image2.png') %>');">
  <div class="container mx-auto p-4 flex flex-col items-center justify-center min-h-screen">
    <h1 class="card-title text-2xl text-white mb-8">ゲーム画面</h1>
    <div id="flash-message" class="hidden bg-green-500 text-white text-center py-2 px-4 rounded mb-4"></div>
    <div class="game-board grid grid-cols-3 sm:grid-cols-4 md:grid-cols-4 lg:grid-cols-5 gap-4 mt-4">
      <% if @cards.present? %>
        <% @cards.each do |card| %>
          <div class="card bg-gray-200 hover:bg-gray-300 cursor-pointer p-2 w-24 h-32 flex items-center justify-center" data-card='<%= card.to_json %>'>
            <img src="<%= asset_path('card-back.png') %>" alt="Card Back" class="w-full h-full object-scale-fill">
          </div>
        <% end %>
      <% else %>
        <p>No cards available.</p>
      <% end %>
    </div>
    <div class="text-center mt-4">
      <%= link_to 'Back to Home', root_path, class: 'btn btn-primary bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded' %>
    </div>
  </div>

  <script>
  document.addEventListener('turbo:load', () => {//ページのDOMが完全に読み込まれたときにこの関数を実行します。
    console.log('DOM fully loaded and parsed');//DOMの読み込みが完了したことをコンソールに出力します。

    const gameBoard = document.querySelector('.game-board');
    if (!gameBoard) return;

    const cards = document.querySelectorAll('.card');
    let firstCard, secondCard;
    let lockBoard = false;
    let matchedCards = 0;

    function showFlashMessage(message) {
      const flashMessage = document.getElementById('flash-message');
      flashMessage.textContent = message;
      flashMessage.classList.remove('hidden');
      setTimeout(() => {
        flashMessage.classList.add('hidden');
      }, 3000);
    }

    function flipCard(card, cardData) {
      card.innerHTML = `<img src="/assets/nba/${cardData.image_path}" alt="${cardData.name}" class="w-full h-full object-cover">`;
      card.classList.add('flipped');
    }

    function unflipCards(firstCard, secondCard, backImage) {
      setTimeout(() => {
        console.log('Unflipping cards:', firstCard, secondCard);
        firstCard.innerHTML = `<img src="${backImage}" alt="Card Back" class="w-full h-full object-cover">`;
        secondCard.innerHTML = `<img src="${backImage}" alt="Card Back" class="w-full h-full object-cover">`;
        firstCard.classList.remove('flipped');
        secondCard.classList.remove('flipped');
        lockBoard = false;
      }, 1000);
    }

    function resetGame() {
      matchedCards = 0;
      fetchNewCards();
      lockBoard = false;
    }

    function shuffleCards() {
      const gameBoard = document.querySelector('.game-board');
      for (let i = gameBoard.children.length; i >= 0; i--) {
        gameBoard.appendChild(gameBoard.children[Math.random() * i | 0]);
      }
    }

    async function fetchNewCards() {
      try {
        const response = await fetch('/games/new_cards');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const newCards = await response.json();
        updateCards(newCards);
      } catch (error) {
        console.error('Error fetching new cards:', error);
      }
    }

    function updateCards(newCards) {
      gameBoard.innerHTML = '';
      newCards.forEach(cardData => {
        const card = document.createElement('div');
        card.className = 'card bg-gray-200 hover:bg-gray-300 cursor-pointer p-2 w-24 h-32 flex items-center justify-center';
        card.dataset.card = JSON.stringify(cardData);
        card.innerHTML = `<img src="<%= asset_path('card-back.png') %>" alt="Card Back" class="w-full h-full object-cover">`;
        gameBoard.appendChild(card);
        card.addEventListener('click', handleCardClick);
      });
      shuffleCards(); // ランダムに配置する
    }

    function checkAllCardsMatched() {  //  すべてのカードが一致したか確認する関数
           
      if (matchedCards === cards.length) {  // すべてのカードが一致したかどうかを確認します。
// マッチしたカードのペア数をカウントする変数。カードの総数。
        setTimeout(() => {
          showFlashMessage('おめでとうございます！すべてのカードが一致しました！');
          resetGame();
        }, 500);
      }
    }

    function handleCardClick(event) {  //カードクリックイベントを処理する関数です。
                          // クリックイベントオブジェクトを表します。
      const card = event.currentTarget; //クリックされたカード要素を取得します。

      if (lockBoard || card.classList.contains('flipped')) return;//ボードがロックされているか、カードがすでに裏返されている場合は関数を終了します。
         //lockBoard: 他のカードが処理中であることを示すフラグ。
         //card.classList.contains('flipped'): カードがすでに裏返されているかどうかを確認
      if (!card.dataset.card) {//カードのデータ属性が存在しない場合はエラーメッセージを表示して関数を終了します。
        // カードのデータ属性を取得
        console.error('Card data attribute is undefined:', card);
        // エラーメッセージをコンソールに表示します。
        return;
      }

      const cardData = JSON.parse(card.dataset.card);//カードのデータ属性をJSON形式のオブジェクトに変換します。
                     //JSON.parse: JSON文字列をJavaScriptのオブジェクトに変換します。
      console.log('Card clicked:', cardData);//カードがクリックされたことをコンソールに表示します。

      if (!cardData) {//カードデータが存在しない場合はエラーメッセージを表示して関数を終了します。
        console.error('Card data is undefined');//エラーメッセージをコンソールに表示します。
        return;
      }

      flipCard(card, cardData);//カードを裏返す関数を呼び出します。

      if (!firstCard) {//最初のカードが設定されていない場合は、現在のカードを最初のカードとして設定します。
        firstCard = { element: card, data: cardData };//最初のカードの要素とデータを設定します。
      } else {//すでに最初のカードが設定されている場合は、現在のカードを2枚目のカードとして設定します。
        secondCard = { element: card, data: cardData };// 2枚目のカードの要素とデータを設定します。
        lockBoard = true;//ボードをロックします

        fetch('/games/flip', {//サーバーにPOSTリクエストを送信します。
          method: 'POST',//HTTPメソッドとしてPOSTを使用します。
          headers: {//リクエストヘッダーを設定します
            'Content-Type': 'application/json',//リクエストボディのコンテンツタイプをJSONに設定します。
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
          },// CSRFトークンを設定します。
          body: JSON.stringify({ first_card: firstCard.data, second_card: secondCard.data })//リクエストボディにカードデータをJSON形式で設定します。
        })//JavaScriptのオブジェクトをJSON文字列に変換します。
        .then(response => {//リクエストが成功した場合の処理を設定します。
          if (!response.ok) {//レスポンスが正常でない場合はエラーメッセージを表示します。
            throw new Error('Network response was not ok');
          }
          return response.json();//レスポンスをJSON形式に変換します。
        })
        .then(data => {//JSON形式のデータを受け取った後の処理を設定します。
          console.log('Response data:', data);//レスポンスデータをコンソールに表示します。
          if (data.match) {//カードが一致した場合の処理を設定します。
            console.log("Match!");//一致したことをコンソールに表示します。
            matchedCards += 2;//一致したカードの数を増やします。
            firstCard = secondCard = null;//最初のカードと2枚目のカードをリセットします。
            lockBoard = false;//ボードのロックを解除します。
            checkAllCardsMatched();//すべてのカードが一致したかどうかを確認します。
          } else {
            console.log("No Match!");//一致しなかったことをコンソールに表示します。
            unflipCards(firstCard.element, secondCard.element, data.back_image);//カードを元に戻す関数を呼び出します。
            firstCard = secondCard = null;
          }
        })
        .catch(error => {//リクエストが失敗した場合のエラーハンドリングを設定します。
          console.error('Error:', error);//エラーメッセージをコンソールに表示します。
          lockBoard = false;//ボードのロックを解除します。
          firstCard = secondCard = null;
        });
      }
    }

    cards.forEach(card => {//すべてのカードに対してクリックイベントリスナーを設定します。
    //forEach: 配列の各要素に対して指定した関数を実行します。//card: 各カード要素。
      console.log('Card element:', card);//カード要素をコンソールに表示します。
      console.log('Data-card attribute:', card.dataset.card);//カードのデータ属性をコンソールに表示します。
      card.addEventListener('click', handleCardClick);//カード要素にクリックイベントリスナーを追加します。
    });//addEventListener: イベントリスナーを追加します。//click': クリックイベント。//クリックイベントが発生したときに実行する関数。
  });
  </script>
</body>
</html>
