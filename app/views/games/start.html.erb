<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>神経衰弱ゲーム</title>
  <link rel="stylesheet" href="https://unpkg.com/tailwindcss@2.2.19/dist/tailwind.min.css"/>
  <meta name="csrf-token" content="<%= form_authenticity_token %>">
</head>
<body class="font-sans antialiased text-gray-900 leading-normal tracking-wider bg-cover" style="background-image:url('<%= asset_path('back_image2.jpg') %>');">
  <div class="container mx-auto p-4 flex flex-col items-center justify-center min-h-screen">
    <h1 class="card-title text-2xl text-white mb-8">ゲーム画面</h1>
    <div id="flash-message" class="hidden bg-green-500 text-white text-center py-2 px-4 rounded mb-4"></div>
    <div class="game-board grid grid-cols-5 gap-4 mt-4">
      <% if @cards.present? %>
        <% @cards.each do |card| %>
          <div class="card bg-gray-200 hover:bg-gray-300 cursor-pointer p-2 w-24 h-32 flex items-center justify-center" data-card='<%= card.to_json %>'>
            <img src="<%= asset_path('card-back.png') %>" alt="Card Back" class="w-full h-full object-cover">
          </div>
        <% end %>
      <% else %>
        <p>No cards available.</p>
      <% end %>
    </div>
    <div class="text-center mt-4">
      <%= link_to 'Back to Home', root_path, class: 'btn btn-primary bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded' %>
    </div>
  </div>

  <script>
  document.addEventListener('turbo:load', () => {
    console.log('DOM fully loaded and parsed');

    const gameBoard = document.querySelector('.game-board');
    if (!gameBoard) return;

    const cards = document.querySelectorAll('.card');
    let firstCard, secondCard;
    let lockBoard = false;
    let matchedCards = 0;

    function showFlashMessage(message) {
      const flashMessage = document.getElementById('flash-message');
      flashMessage.textContent = message;
      flashMessage.classList.remove('hidden');
      setTimeout(() => {
        flashMessage.classList.add('hidden');
      }, 3000);
    }

    function flipCard(card, cardData) {
      card.innerHTML = `<img src="/assets/nba/${cardData.image_path}" alt="${cardData.name}" class="w-full h-full object-cover">`;
      card.classList.add('flipped');
    }

    function unflipCards(firstCard, secondCard, backImage) {
      setTimeout(() => {
        console.log('Unflipping cards:', firstCard, secondCard);
        firstCard.innerHTML = `<img src="${backImage}" alt="Card Back" class="w-full h-full object-cover">`;
        secondCard.innerHTML = `<img src="${backImage}" alt="Card Back" class="w-full h-full object-cover">`;
        firstCard.classList.remove('flipped');
        secondCard.classList.remove('flipped');
        lockBoard = false;
      }, 1000);
    }

    function resetGame() {
      matchedCards = 0;
      fetchNewCards();
      lockBoard = false;
    }

    function shuffleCards() {
      const gameBoard = document.querySelector('.game-board');
      for (let i = gameBoard.children.length; i >= 0; i--) {
        gameBoard.appendChild(gameBoard.children[Math.random() * i | 0]);
      }
    }

    async function fetchNewCards() {
      try {
        const response = await fetch('/games/new_cards');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const newCards = await response.json();
        updateCards(newCards);
      } catch (error) {
        console.error('Error fetching new cards:', error);
      }
    }

    function updateCards(newCards) {
      gameBoard.innerHTML = '';
      newCards.forEach(cardData => {
        const card = document.createElement('div');
        card.className = 'card bg-gray-200 hover:bg-gray-300 cursor-pointer p-2 w-24 h-32 flex items-center justify-center';
        card.dataset.card = JSON.stringify(cardData);
        card.innerHTML = `<img src="<%= asset_path('card-back.png') %>" alt="Card Back" class="w-full h-full object-cover">`;
        gameBoard.appendChild(card);
        card.addEventListener('click', handleCardClick);
      });
      shuffleCards(); // ランダムに配置する
    }

    function checkAllCardsMatched() {
      if (matchedCards === cards.length) {
        setTimeout(() => {
          showFlashMessage('おめでとうございます！すべてのカードが一致しました！');
          resetGame();
        }, 500);
      }
    }

    function handleCardClick(event) {
      const card = event.currentTarget;

      if (lockBoard || card.classList.contains('flipped')) return;

      if (!card.dataset.card) {
        console.error('Card data attribute is undefined:', card);
        return;
      }

      const cardData = JSON.parse(card.dataset.card);
      console.log('Card clicked:', cardData);

      if (!cardData) {
        console.error('Card data is undefined');
        return;
      }

      flipCard(card, cardData);

      if (!firstCard) {
        firstCard = { element: card, data: cardData };
      } else {
        secondCard = { element: card, data: cardData };
        lockBoard = true;

        fetch('/games/flip', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
          },
          body: JSON.stringify({ first_card: firstCard.data, second_card: secondCard.data })
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          console.log('Response data:', data);
          if (data.match) {
            console.log("Match!");
            matchedCards += 2;
            firstCard = secondCard = null;
            lockBoard = false;
            checkAllCardsMatched();
          } else {
            console.log("No Match!");
            unflipCards(firstCard.element, secondCard.element, data.back_image);
            firstCard = secondCard = null;
          }
        })
        .catch(error => {
          console.error('Error:', error);
          lockBoard = false;
          firstCard = secondCard = null;
        });
      }
    }

    cards.forEach(card => {
      console.log('Card element:', card);
      console.log('Data-card attribute:', card.dataset.card);
      card.addEventListener('click', handleCardClick);
    });
  });
  </script>
</body>
</html>
